# -*- coding: utf-8 -*-
"""Loss(vq_vae).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ofcO1nV5s5yk50PLFOqD508T9wO8QES
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from vq_vae import VQ_VAE

class vqloss(nn.Module):
  def __init__(self,beta=0.6):
    super(vqloss,self).__init__()
    self.b=beta

  def forward(self,enc_x,emb_x,pred_x,true_x):
    loss1=F.mse_loss(pred_x,true_x)
    #print((torch.norm(enc_x-emb_x,dim=1)).shape)
    embed_loss= torch.mean(torch.sum((torch.norm(enc_x.detach()-emb_x,dim=1)),(2,1)))
    stability_loss= self.b*(torch.mean(torch.sum((torch.norm(enc_x-emb_x.detach(),dim=1)),(2,1))))

    loss=loss1+embed_loss+stability_loss

    return loss

loss=vqloss()
vq_vae=VQ_VAE()
x=torch.randn(2,1,28,28)
y=vq_vae(x)

loss(y[0],y[1],y[2],x)