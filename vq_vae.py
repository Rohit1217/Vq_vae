# -*- coding: utf-8 -*-
"""Vq_vae.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O85jnWAzUVpV_MelNIxdFiHYRX8dO3th
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

class Codebook():
  def __init__(self,w,h,d):
    self.codebook=torch.randn(w,h,d)

  def get_code(self,x):
    w,h,d=self.codebook.shape
    dist_codebook=torch.norm(self.codebook-x,dim=-1)
    emb_index=torch.argmin(dist_codebook)
    return self.codebook.view(w*h,d)[emb_index]

  def get_embedding(self,x):
    b,w,h,d=x.shape
    w2,h2,d2=self.codebook.shape
    for k in range(b):
      for i in range(w):
        for j in range(h):
          x[k,i,j]=self.get_code(x[k,i,j])
    return x

class Encoder(nn.Module):
  def __init__(self,in_channels,out_channels,kernel,stride=2):
    super(Encoder,self).__init__()

    self.conv1=nn.Conv2d(in_channels,out_channels,kernel,stride)
    self.conv2=nn.Conv2d(out_channels,out_channels*2,kernel,stride)
    self.conv3=nn.Conv2d(out_channels*2,out_channels*4,kernel,stride)

  def forward(self,x):
    x=F.relu(self.conv1(x))
    x=F.relu(self.conv2(x))
    x=F.relu(self.conv3(x))
    return x

'''enc=Encoder(1,16,2)
x=torch.randn(2,1,28,28)
enc(x).shape,enc(x)'''

class Decoder(nn.Module):
  def __init__(self,in_channels,out_channels,kernel,stride=2):
    super(Decoder,self).__init__()
    self.conv1=nn.ConvTranspose2d(in_channels,in_channels//2,kernel,stride)
    self.conv2=nn.ConvTranspose2d(in_channels//2,in_channels//4,kernel,stride)
    self.conv3=nn.ConvTranspose2d(in_channels//4,in_channels//8,kernel,stride)
    self.conv4=nn.ConvTranspose2d(in_channels//8,out_channels,kernel_size=5,stride=1)


  def forward(self,x):
    x=F.relu(self.conv1(x))
    x=F.relu(self.conv2(x))
    x=F.relu(self.conv3(x))
    x=F.relu(self.conv4(x))
    return x

'''dec=Decoder(64,1,2)
x=torch.randn(2,64,3,3)
dec(x).shape,dec(x)'''

class VQ_VAE(nn.Module):
  def __init__(self):
    super(VQ_VAE,self).__init__()
    self.codebook=Codebook(64,3,3)
    self.encoder=Encoder(1,16,2)
    self.decoder=Decoder(64,1,2)

  def forward(self,x):
    code=self.codebook.codebook
    x=self.encoder(x)
    zx=self.codebook.get_embedding(x)
    dx=self.decoder(x+(zx-x).detach())
    return x,zx,dx

'''vq_vae=VQ_VAE()
x=torch.randn(2,1,28,28)
y=vq_vae(x)

for i in y:
  print(i.shape)
y'''

